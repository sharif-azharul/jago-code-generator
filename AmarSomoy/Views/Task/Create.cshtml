@using Telerik.Web.Mvc.UI

@model AmarSomoy.Models.TaskModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>TaskModel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            @Html.LabelFor(model => model.TaskId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TaskId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.TaskId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CompanyCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CompanyCode, ViewBag.CompanyList as IEnumerable<SelectListItem>, "Select...", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CompanyCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProjectCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ProjectCode, ViewBag.ProjectList as IEnumerable<SelectListItem>, "Select...", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProjectCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TaskDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.TaskDescription, htmlAttributes: new { @class = "k-textbox", style = "width: 100%;height:80px" })
                @Html.ValidationMessageFor(model => model.TaskDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TaskOwnerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.HiddenFor(model => model.TaskOwnerId)
                @Html.EditorFor(model => model.TaskOwner, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.TaskOwner, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" id="btnCreate" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            toastr.info('Page Loaded!');
            $('#btnCreate').click(function () {

                var datahModel = {
                    CompanyCode: $('#CompanyCode').val(),
                    ProjectCode: $('#ProjectCode').val(),
                    StartTime: $('#StartTime').val(),
                    EndTime: $('#EndTime').val(),
                    TaskDescription: $('#TaskDescription').val(),
                    TaskOwnerId: $('#TaskOwnerId').val(),
                    TaskOwner: $('#TaskOwner').val()

                };

                $.ajax({
                    url: "@Url.Action("Create", "Task")",
                    type: "POST",
                    data: datahModel,
                    dataType: "json",
                    success: function (data) {
                        console.log(data);
                        if (data.STATUS == "Success") {
                            toastr.success(data.MESSAGE, data.STATUS);
                            window.setTimeout(function () { window.location = "@Url.Action("Index", "Task")"; }, 2000)
                        }
                        else if (data.STATUS == "Validation")
                            toastr.warning(data.MESSAGE, data.STATUS);
                        else if (data.STATUS == "Exception")
                            toastr.error(data.MESSAGE, data.STATUS);
                    },
                    error: function (xhr, httpStatus, msg) {
                        toastr.error("Error! Please try again", "Error");
                    }
                });

                return false;
            });
        });
    </script>
}
